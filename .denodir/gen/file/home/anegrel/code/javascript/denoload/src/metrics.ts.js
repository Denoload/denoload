export function aggregateMetrics(...metrics) {
  const result = {};
  for(let i = 0; i < metrics.length; i++){
    const singleMetricsRecord = metrics[i];
    for(const metricName in singleMetricsRecord){
      const singleMetric = singleMetricsRecord[metricName];
      if (result[metricName] === undefined) {
        result[metricName] = singleMetric;
        continue;
      }
      const resultMetric = result[metricName];
      if (resultMetric.max < singleMetric.max) {
        resultMetric.max = singleMetric.max;
      }
      if (resultMetric.min > singleMetric.min) {
        resultMetric.min = singleMetric.min;
      }
      resultMetric.avg = (resultMetric.avg * resultMetric.datapoints + singleMetric.avg * singleMetric.datapoints) / (singleMetric.datapoints + resultMetric.datapoints);
      resultMetric.datapoints += singleMetric.datapoints;
    }
  }
  return result;
}
export function computePerformanceMetric(entries) {
  const result = {
    datapoints: 0,
    min: Number.MAX_SAFE_INTEGER,
    avg: 0,
    max: 0,
    p99: computePerformanceEntryListPercentile(entries, 99),
    p95: computePerformanceEntryListPercentile(entries, 95),
    p90: computePerformanceEntryListPercentile(entries, 90)
  };
  if (entries.length === 0) {
    result.min = 0;
    return result;
  }
  let sum = 0;
  for (const entry of entries){
    if (entry.duration < result.min) {
      result.min = entry.duration;
    }
    if (entry.duration > result.max) {
      result.max = entry.duration;
    }
    sum += entry.duration;
  }
  result.datapoints = entries.length;
  result.avg = sum / entries.length;
  return result;
}
function computePerformanceEntryListPercentile(values, percentile) {
  if (values.length === 0) {
    return 0;
  }
  const durations = values.sort((entryA, entryB)=>entryA.duration - entryB.duration);
  const index = percentile / 100 * (durations.length - 1);
  // If the index is an integer, return the corresponding value
  if (Number.isInteger(index)) {
    return durations[index].duration;
  } else {
    // Interpolate between values at floor and ceiling indices
    const floorIndex = Math.floor(index);
    const ceilIndex = Math.ceil(index);
    const floorValue = durations[floorIndex].duration;
    const ceilValue = durations[ceilIndex].duration;
    // Use linear interpolation
    const fraction = index - floorIndex;
    return floorValue + (ceilValue - floorValue) * fraction;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9hbmVncmVsL2NvZGUvamF2YXNjcmlwdC9kZW5vbG9hZC9zcmMvbWV0cmljcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIFBlcmZvcm1hbmNlTWV0cmljIHtcbiAgZGF0YXBvaW50czogbnVtYmVyO1xuICBtaW46IG51bWJlcjtcbiAgYXZnOiBudW1iZXI7XG4gIG1heDogbnVtYmVyO1xuICBwOTk6IG51bWJlcjtcbiAgcDk1OiBudW1iZXI7XG4gIHA5MDogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWdncmVnYXRlTWV0cmljcyhcbiAgLi4ubWV0cmljczogUmVjb3JkPHN0cmluZywgUGVyZm9ybWFuY2VNZXRyaWM+W11cbik6IFJlY29yZDxzdHJpbmcsIFBlcmZvcm1hbmNlTWV0cmljPiB7XG4gIGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgUGVyZm9ybWFuY2VNZXRyaWM+ID0ge307XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRyaWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2luZ2xlTWV0cmljc1JlY29yZCA9IG1ldHJpY3NbaV07XG5cbiAgICBmb3IgKGNvbnN0IG1ldHJpY05hbWUgaW4gc2luZ2xlTWV0cmljc1JlY29yZCkge1xuICAgICAgY29uc3Qgc2luZ2xlTWV0cmljID0gc2luZ2xlTWV0cmljc1JlY29yZFttZXRyaWNOYW1lXTtcbiAgICAgIGlmIChyZXN1bHRbbWV0cmljTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHRbbWV0cmljTmFtZV0gPSBzaW5nbGVNZXRyaWM7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdWx0TWV0cmljID0gcmVzdWx0W21ldHJpY05hbWVdO1xuXG4gICAgICBpZiAocmVzdWx0TWV0cmljLm1heCA8IHNpbmdsZU1ldHJpYy5tYXgpIHtcbiAgICAgICAgcmVzdWx0TWV0cmljLm1heCA9IHNpbmdsZU1ldHJpYy5tYXg7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0TWV0cmljLm1pbiA+IHNpbmdsZU1ldHJpYy5taW4pIHtcbiAgICAgICAgcmVzdWx0TWV0cmljLm1pbiA9IHNpbmdsZU1ldHJpYy5taW47XG4gICAgICB9XG4gICAgICByZXN1bHRNZXRyaWMuYXZnID0gKHJlc3VsdE1ldHJpYy5hdmcgKiByZXN1bHRNZXRyaWMuZGF0YXBvaW50cyArXG4gICAgICAgIHNpbmdsZU1ldHJpYy5hdmcgKiBzaW5nbGVNZXRyaWMuZGF0YXBvaW50cykgL1xuICAgICAgICAoc2luZ2xlTWV0cmljLmRhdGFwb2ludHMgKyByZXN1bHRNZXRyaWMuZGF0YXBvaW50cyk7XG4gICAgICByZXN1bHRNZXRyaWMuZGF0YXBvaW50cyArPSBzaW5nbGVNZXRyaWMuZGF0YXBvaW50cztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVBlcmZvcm1hbmNlTWV0cmljKFxuICBlbnRyaWVzOiBQZXJmb3JtYW5jZUVudHJ5TGlzdCxcbik6IFBlcmZvcm1hbmNlTWV0cmljIHtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIGRhdGFwb2ludHM6IDAsXG4gICAgbWluOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICBhdmc6IDAsXG4gICAgbWF4OiAwLFxuICAgIHA5OTogY29tcHV0ZVBlcmZvcm1hbmNlRW50cnlMaXN0UGVyY2VudGlsZShlbnRyaWVzLCA5OSksXG4gICAgcDk1OiBjb21wdXRlUGVyZm9ybWFuY2VFbnRyeUxpc3RQZXJjZW50aWxlKGVudHJpZXMsIDk1KSxcbiAgICBwOTA6IGNvbXB1dGVQZXJmb3JtYW5jZUVudHJ5TGlzdFBlcmNlbnRpbGUoZW50cmllcywgOTApLFxuICB9O1xuICBpZiAoZW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICByZXN1bHQubWluID0gMDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgbGV0IHN1bSA9IDA7XG4gIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgIGlmIChlbnRyeS5kdXJhdGlvbiA8IHJlc3VsdC5taW4pIHtcbiAgICAgIHJlc3VsdC5taW4gPSBlbnRyeS5kdXJhdGlvbjtcbiAgICB9XG4gICAgaWYgKGVudHJ5LmR1cmF0aW9uID4gcmVzdWx0Lm1heCkge1xuICAgICAgcmVzdWx0Lm1heCA9IGVudHJ5LmR1cmF0aW9uO1xuICAgIH1cbiAgICBzdW0gKz0gZW50cnkuZHVyYXRpb247XG4gIH1cbiAgcmVzdWx0LmRhdGFwb2ludHMgPSBlbnRyaWVzLmxlbmd0aDtcbiAgcmVzdWx0LmF2ZyA9IHN1bSAvIGVudHJpZXMubGVuZ3RoO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVQZXJmb3JtYW5jZUVudHJ5TGlzdFBlcmNlbnRpbGUoXG4gIHZhbHVlczogUGVyZm9ybWFuY2VFbnRyeUxpc3QsXG4gIHBlcmNlbnRpbGU6IG51bWJlcixcbik6IG51bWJlciB7XG4gIGlmICh2YWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBjb25zdCBkdXJhdGlvbnMgPSB2YWx1ZXMuc29ydCgoZW50cnlBLCBlbnRyeUIpID0+XG4gICAgZW50cnlBLmR1cmF0aW9uIC0gZW50cnlCLmR1cmF0aW9uXG4gICk7XG5cbiAgY29uc3QgaW5kZXggPSAocGVyY2VudGlsZSAvIDEwMCkgKiAoZHVyYXRpb25zLmxlbmd0aCAtIDEpO1xuXG4gIC8vIElmIHRoZSBpbmRleCBpcyBhbiBpbnRlZ2VyLCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVcbiAgaWYgKE51bWJlci5pc0ludGVnZXIoaW5kZXgpKSB7XG4gICAgcmV0dXJuIGR1cmF0aW9uc1tpbmRleF0uZHVyYXRpb247XG4gIH0gZWxzZSB7XG4gICAgLy8gSW50ZXJwb2xhdGUgYmV0d2VlbiB2YWx1ZXMgYXQgZmxvb3IgYW5kIGNlaWxpbmcgaW5kaWNlc1xuICAgIGNvbnN0IGZsb29ySW5kZXggPSBNYXRoLmZsb29yKGluZGV4KTtcbiAgICBjb25zdCBjZWlsSW5kZXggPSBNYXRoLmNlaWwoaW5kZXgpO1xuICAgIGNvbnN0IGZsb29yVmFsdWUgPSBkdXJhdGlvbnNbZmxvb3JJbmRleF0uZHVyYXRpb247XG4gICAgY29uc3QgY2VpbFZhbHVlID0gZHVyYXRpb25zW2NlaWxJbmRleF0uZHVyYXRpb247XG5cbiAgICAvLyBVc2UgbGluZWFyIGludGVycG9sYXRpb25cbiAgICBjb25zdCBmcmFjdGlvbiA9IGluZGV4IC0gZmxvb3JJbmRleDtcbiAgICByZXR1cm4gZmxvb3JWYWx1ZSArIChjZWlsVmFsdWUgLSBmbG9vclZhbHVlKSAqIGZyYWN0aW9uO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEsT0FBTyxTQUFTLGlCQUNkLEdBQUcsT0FBNEM7RUFFL0MsTUFBTSxTQUE0QyxDQUFDO0VBRW5ELElBQUssSUFBSSxJQUFJLEdBQUcsSUFBSSxRQUFRLE1BQU0sRUFBRSxJQUFLO0lBQ3ZDLE1BQU0sc0JBQXNCLE9BQU8sQ0FBQyxFQUFFO0lBRXRDLElBQUssTUFBTSxjQUFjLG9CQUFxQjtNQUM1QyxNQUFNLGVBQWUsbUJBQW1CLENBQUMsV0FBVztNQUNwRCxJQUFJLE1BQU0sQ0FBQyxXQUFXLEtBQUssV0FBVztRQUNwQyxNQUFNLENBQUMsV0FBVyxHQUFHO1FBQ3JCO01BQ0Y7TUFDQSxNQUFNLGVBQWUsTUFBTSxDQUFDLFdBQVc7TUFFdkMsSUFBSSxhQUFhLEdBQUcsR0FBRyxhQUFhLEdBQUcsRUFBRTtRQUN2QyxhQUFhLEdBQUcsR0FBRyxhQUFhLEdBQUc7TUFDckM7TUFDQSxJQUFJLGFBQWEsR0FBRyxHQUFHLGFBQWEsR0FBRyxFQUFFO1FBQ3ZDLGFBQWEsR0FBRyxHQUFHLGFBQWEsR0FBRztNQUNyQztNQUNBLGFBQWEsR0FBRyxHQUFHLENBQUMsYUFBYSxHQUFHLEdBQUcsYUFBYSxVQUFVLEdBQzVELGFBQWEsR0FBRyxHQUFHLGFBQWEsVUFBVSxJQUMxQyxDQUFDLGFBQWEsVUFBVSxHQUFHLGFBQWEsVUFBVTtNQUNwRCxhQUFhLFVBQVUsSUFBSSxhQUFhLFVBQVU7SUFDcEQ7RUFDRjtFQUVBLE9BQU87QUFDVDtBQUVBLE9BQU8sU0FBUyx5QkFDZCxPQUE2QjtFQUU3QixNQUFNLFNBQVM7SUFDYixZQUFZO0lBQ1osS0FBSyxPQUFPLGdCQUFnQjtJQUM1QixLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUssc0NBQXNDLFNBQVM7SUFDcEQsS0FBSyxzQ0FBc0MsU0FBUztJQUNwRCxLQUFLLHNDQUFzQyxTQUFTO0VBQ3REO0VBQ0EsSUFBSSxRQUFRLE1BQU0sS0FBSyxHQUFHO0lBQ3hCLE9BQU8sR0FBRyxHQUFHO0lBQ2IsT0FBTztFQUNUO0VBRUEsSUFBSSxNQUFNO0VBQ1YsS0FBSyxNQUFNLFNBQVMsUUFBUztJQUMzQixJQUFJLE1BQU0sUUFBUSxHQUFHLE9BQU8sR0FBRyxFQUFFO01BQy9CLE9BQU8sR0FBRyxHQUFHLE1BQU0sUUFBUTtJQUM3QjtJQUNBLElBQUksTUFBTSxRQUFRLEdBQUcsT0FBTyxHQUFHLEVBQUU7TUFDL0IsT0FBTyxHQUFHLEdBQUcsTUFBTSxRQUFRO0lBQzdCO0lBQ0EsT0FBTyxNQUFNLFFBQVE7RUFDdkI7RUFDQSxPQUFPLFVBQVUsR0FBRyxRQUFRLE1BQU07RUFDbEMsT0FBTyxHQUFHLEdBQUcsTUFBTSxRQUFRLE1BQU07RUFFakMsT0FBTztBQUNUO0FBRUEsU0FBUyxzQ0FDUCxNQUE0QixFQUM1QixVQUFrQjtFQUVsQixJQUFJLE9BQU8sTUFBTSxLQUFLLEdBQUc7SUFDdkIsT0FBTztFQUNUO0VBRUEsTUFBTSxZQUFZLE9BQU8sSUFBSSxDQUFDLENBQUMsUUFBUSxTQUNyQyxPQUFPLFFBQVEsR0FBRyxPQUFPLFFBQVE7RUFHbkMsTUFBTSxRQUFRLEFBQUMsYUFBYSxNQUFPLENBQUMsVUFBVSxNQUFNLEdBQUcsQ0FBQztFQUV4RCw2REFBNkQ7RUFDN0QsSUFBSSxPQUFPLFNBQVMsQ0FBQyxRQUFRO0lBQzNCLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRO0VBQ2xDLE9BQU87SUFDTCwwREFBMEQ7SUFDMUQsTUFBTSxhQUFhLEtBQUssS0FBSyxDQUFDO0lBQzlCLE1BQU0sWUFBWSxLQUFLLElBQUksQ0FBQztJQUM1QixNQUFNLGFBQWEsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRO0lBQ2pELE1BQU0sWUFBWSxTQUFTLENBQUMsVUFBVSxDQUFDLFFBQVE7SUFFL0MsMkJBQTJCO0lBQzNCLE1BQU0sV0FBVyxRQUFRO0lBQ3pCLE9BQU8sYUFBYSxDQUFDLFlBQVksVUFBVSxJQUFJO0VBQ2pEO0FBQ0YifQ==