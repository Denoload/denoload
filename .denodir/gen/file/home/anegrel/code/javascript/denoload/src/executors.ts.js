import { ExecutorKind } from "./datatypes.ts";
import log from "./log.ts";
import { aggregateMetrics } from "./metrics.ts";
import { WorkerPool } from "./worker_pool.ts";
const logger = log.getLogger("main");
const encoder = new TextEncoder();
/**
 * Executor are responsible for coordinating and managing the entire life cycle
 * of a scenario.
 *
 * This is the abstract base class that handle common tasks such as initializing
 * the worker pool.
 */ class Executor {
  workerPool = new WorkerPool();
  consoleReporterIntervalId = null;
  consoleReporterCb = ()=>{};
  performanceMetrics = {};
  startConsoleReporter() {
    if (this.consoleReporterIntervalId) {
      return this.consoleReporterIntervalId;
    }
    const startTime = new Date();
    const progressBarEmptyChar = "--------------------------------------------------";
    const progressBarFullChar = "==================================================";
    this.consoleReporterIntervalId = setInterval(async ()=>{
      const progress = await this.scenarioProgress();
      const duration = new Date().getTime() - startTime.getTime();
      const percentage = Math.floor(progress.percentage);
      // Deno.stdout.write(encoder.encode("\x1b[2A\x1b[K"));
      Deno.stdout.write(encoder.encode(`running (${Math.round(duration / 1000)}s), ${progress.currentVus}/${progress.maxVus} VUs, ${progress.currentIterations}/${progress.maxIterations} iterations.\n`));
      Deno.stdout.write(encoder.encode(`${progress.scenarioName} [${progressBarFullChar.slice(0, Math.floor(percentage / 2))}${progressBarEmptyChar.slice(0, 50 - Math.floor(percentage / 2))}]\n`));
      this.consoleReporterCb();
    }, 1000);
  }
  stopConsoleReporter() {
    if (this.consoleReporterIntervalId) {
      return new Promise((resolve)=>{
        this.consoleReporterCb = ()=>{
          clearInterval(this.consoleReporterIntervalId);
          resolve(undefined);
        };
      });
    }
  }
  async collectPerformanceMetrics() {
    // Collect metrics.
    const metrics = await this.workerPool.forEachWorkerRemoteProcedureCall({
      name: "collectPerformanceMetrics",
      args: []
    }, {
      timeout: 1000
    });
    const result = [];
    for (const m of metrics){
      if (m.status === "rejected") {
        logger.error("one or more workers metrics were lost, result may be innacurate");
      } else {
        result.push(m.value);
      }
    }
    this.performanceMetrics = aggregateMetrics(this.performanceMetrics, ...result);
    return this.performanceMetrics;
  }
}
/**
 * Per VU iteration executor managed a fixed amount of iteration per VU.
 */ export class ExecutorPerVuIteration extends Executor {
  scenarioName = "";
  currentVus = 0;
  maxVus = 0;
  totalIterations = 0;
  async execute(moduleURL, scenarioName, scenarioOptions) {
    logger.info(`executing "${scenarioName}" scenario...`);
    this.maxVus = scenarioOptions.vus;
    this.totalIterations = scenarioOptions.iterations * this.maxVus;
    this.scenarioName = scenarioName;
    this.startConsoleReporter();
    logger.debug("running VUs...");
    const scenarioStart = performance.now();
    const promises = new Array(scenarioOptions.vus);
    for(let vus = 0; vus < scenarioOptions.vus; vus++){
      promises[vus] = this.workerPool.remoteProcedureCall({
        name: "iterations",
        args: [
          moduleURL.toString(),
          scenarioOptions.iterations,
          {
            vus
          }
        ]
      });
      this.currentVus++;
    }
    // Wait end of all iterations.
    await Promise.all(promises);
    const scenarioEnd = performance.now();
    // Collect metrics.
    const metrics = await this.collectPerformanceMetrics();
    // Clean up.
    await this.stopConsoleReporter();
    this.workerPool.terminate();
    logger.debug("VUs ran.");
    logger.info(`scenario "${scenarioName}" successfully executed in ${scenarioEnd - scenarioStart}ms.`);
    console.log(metrics);
  }
  async scenarioProgress() {
    await this.collectPerformanceMetrics();
    const currentIterations = this.performanceMetrics["iteration"]?.datapoints || 0;
    return {
      scenarioName: this.scenarioName,
      currentVus: this.currentVus,
      maxVus: this.maxVus,
      currentIterations,
      maxIterations: this.totalIterations,
      percentage: currentIterations / this.totalIterations * 100,
      extraInfos: ""
    };
  }
}
/**
 * Map of executors.
 */ const executors = {
  [ExecutorKind.PerVuIteration]: ExecutorPerVuIteration
};
export default executors;
//# sourceMappingURL=data:application/json;base64,