import log from "./log.ts";
const defaultRpcOptions = {
  timeout: 30000,
  transfer: []
};
const logger = log.getLogger("main");
let globalMsgId = 0;
export class RpcWorker {
  worker;
  responseHandlers = new Map();
  constructor(specifier, options){
    this.worker = new Worker(specifier, options);
    this.worker.onmessage = this.onResponse.bind(this);
  }
  terminate() {
    this.worker.terminate();
  }
  onResponse(event) {
    const responseId = event.data.id;
    const responseHandler = this.responseHandlers.get(responseId);
    if (!responseHandler) {
      throw new Error(`received unexpected response for rpc ${responseId}, no handler registered`);
    }
    responseHandler(event.data);
  }
  remoteProcedureCall(rpc, options = {}) {
    const { timeout, transfer } = {
      ...options,
      ...defaultRpcOptions
    };
    const msgId = globalMsgId++;
    return new Promise((resolve, reject)=>{
      const timeoutId = setTimeout(()=>{
        reject(`rpc ${msgId} timed out`);
      }, timeout);
      this.addResponseHandler(msgId, (data)=>{
        // Clear timeout and response handler.
        clearTimeout(timeoutId);
        this.removeResponseHandler(msgId);
        logger.debug(`rpc ${data.id} returned ${JSON.stringify(data)}`);
        if (data.error) {
          reject(data.error);
        }
        resolve(data.result);
      });
      logger.debug(`rpc ${msgId} called ${JSON.stringify(rpc)}`);
      this.worker.postMessage({
        id: msgId,
        ...rpc
      }, transfer);
    });
  }
  addResponseHandler(id, handler) {
    this.responseHandlers.set(id, handler);
  }
  removeResponseHandler(id) {
    this.responseHandlers.delete(id);
  }
}
export function workerProcedureHandler(// deno-lint-ignore no-explicit-any
procedures, // deno-lint-ignore no-explicit-any
postMessage) {
  const logger = log.getLogger("worker");
  // deno-lint-ignore no-explicit-any
  return async (event)=>{
    logger.debug(()=>`rpc ${event.data.id} received: ${JSON.stringify(event.data)}`);
    try {
      const procedure = procedures[event.data.name];
      if (typeof procedure !== "function") {
        throw new Error(`procedure "${event.data.name}" doesn't exist`);
      }
      const result = await procedure(...event.data.args);
      logger.debug(()=>`rpc ${event.data.id} done: ${JSON.stringify(result)}`);
      console.log(typeof result);
      postMessage({
        id: event.data.id,
        result
      }, result === undefined ? [] : [
        result
      ]);
    } catch (err) {
      logger.error(`rpc ${event.data.id} error: ${err.stack}`);
      const errStr = err.toString();
      postMessage({
        id: event.data.id,
        error: errStr
      }, []);
    }
  };
}
//# sourceMappingURL=data:application/json;base64,